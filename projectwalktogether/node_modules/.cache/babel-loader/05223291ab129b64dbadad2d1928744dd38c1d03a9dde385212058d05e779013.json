{"ast":null,"code":"var _jsxFileName = \"/Users/minsungsmac/Library/CloudStorage/OneDrive-Personal/ForCode/ProjectWalkTogether/projectwalktogether/src/pages/MapPage/MapPage.tsx\",\n  _s = $RefreshSig$();\nimport { useEffect, useRef, useState } from 'react';\nimport * as ReactDOMServer from 'react-dom/server';\nimport { useParams } from 'react-router-dom';\nimport { useRecoilState, useRecoilValue } from 'recoil';\nimport { dbDefaultState, dbState } from '../../store/selectors';\nimport * as S from './MapPage.style';\nimport InfoWrapper from './InfoWrapper/InfoWrapper';\nimport Overlay from './Overlay/Overlay';\nimport { useMap } from '../../hooks/useMap';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst {\n  kakao\n} = window;\n\n// kakao 객체를 window 객체의 interface로 추가\n\nexport default function Map() {\n  _s();\n  // URL 파라미터 가져오기\n  const {\n    bookstoreId\n  } = useParams();\n\n  // 전역 DB 불러오기\n  const [DB, setDB] = useRecoilState(dbState);\n  const defaultDB = useRecoilValue(dbDefaultState);\n\n  // 지도가 표시될 HTML element\n  const mapContainer = useRef(null);\n  const [markerImage, setMarkerImage] = useState(null);\n\n  // 현재 클릭한 bookstroreId를 저장할 state\n  const [currentOverlayStoreId, setCurrentOverlayStoreId] = useState(null);\n  const {\n    makeMap,\n    makeMarkers,\n    map\n  } = useMap(mapContainer, setMarkerImage, markerImage, DB);\n\n  // * 첫 렌더링 시 지도 생성\n  useEffect(() => {\n    makeMap();\n    setDB(defaultDB);\n  }, [makeMap]);\n\n  // * DB가 변경되면 마커 생성\n  useEffect(() => {\n    makeMarkers();\n  }, [DB, makeMarkers, markerImage]);\n\n  // * 라우터 파라미터로 받은 bookstoreId 값에 따라 지도 이동\n  useEffect(() => {\n    // 지도가 생성되지 않았으면 함수 종료\n    if (!map) return;\n\n    // 이전에 클릭한 마커가 있으면 지도에서 제거\n    const prevOverlay = currentOverlayStoreId;\n    prevOverlay && prevOverlay.setMap(null);\n\n    // bookstoreId에 해당하는 마커로 지도 이동\n    DB.forEach(store => {\n      if (store.ESNTL_ID === bookstoreId) {\n        const moveLatLon = new kakao.maps.LatLng(store.FCLTY_LA, store.FCLTY_LO);\n        map.setLevel(6); // 지도 확대 레벨 설정\n        map.panTo(moveLatLon); // 지도 중심 좌표 이동\n\n        // 커스텀 오버레이 생성\n        const overlayContent = ReactDOMServer.renderToString( /*#__PURE__*/_jsxDEV(Overlay, {\n          info: store\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 79,\n          columnNumber: 21\n        }, this));\n        const overlay = new kakao.maps.CustomOverlay({\n          content: overlayContent,\n          map: map,\n          position: moveLatLon,\n          xAnchor: 0.5,\n          yAnchor: 0.5\n        });\n        setCurrentOverlayStoreId(overlay);\n      }\n    });\n    //eslint-disable-next-line\n  }, [bookstoreId, map, DB]);\n  return /*#__PURE__*/_jsxDEV(S.Container, {\n    children: [/*#__PURE__*/_jsxDEV(InfoWrapper, {\n      map: map\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 97,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(S.MapContainer, {\n      ref: mapContainer\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 98,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 96,\n    columnNumber: 9\n  }, this);\n}\n_s(Map, \"Z0VmdW+Q/4y5MA/Qm8VAfsNG5Bc=\", false, function () {\n  return [useParams, useRecoilState, useRecoilValue, useMap];\n});\n_c = Map;\nvar _c;\n$RefreshReg$(_c, \"Map\");","map":{"version":3,"names":["useEffect","useRef","useState","ReactDOMServer","useParams","useRecoilState","useRecoilValue","dbDefaultState","dbState","S","InfoWrapper","Overlay","useMap","kakao","window","Map","bookstoreId","DB","setDB","defaultDB","mapContainer","markerImage","setMarkerImage","currentOverlayStoreId","setCurrentOverlayStoreId","makeMap","makeMarkers","map","prevOverlay","setMap","forEach","store","ESNTL_ID","moveLatLon","maps","LatLng","FCLTY_LA","FCLTY_LO","setLevel","panTo","overlayContent","renderToString","overlay","CustomOverlay","content","position","xAnchor","yAnchor"],"sources":["/Users/minsungsmac/Library/CloudStorage/OneDrive-Personal/ForCode/ProjectWalkTogether/projectwalktogether/src/pages/MapPage/MapPage.tsx"],"sourcesContent":["import { useEffect, useRef, useState } from 'react'\nimport * as ReactDOMServer from 'react-dom/server'\nimport { useParams } from 'react-router-dom'\n\nimport { useRecoilState, useRecoilValue } from 'recoil'\nimport { dbDefaultState, dbState } from '../../store/selectors'\n\nimport * as S from './MapPage.style'\n\nimport InfoWrapper from './InfoWrapper/InfoWrapper'\nimport Overlay from './Overlay/Overlay'\nimport { useMap } from '../../hooks/useMap'\n\nconst { kakao } = window\n\n// kakao 객체를 window 객체의 interface로 추가\ndeclare global {\n    interface Window {\n        kakao: any\n    }\n}\n\nexport default function Map() {\n    // URL 파라미터 가져오기\n    const { bookstoreId } = useParams()\n\n    // 전역 DB 불러오기\n    const [DB, setDB] = useRecoilState<IdbState[]>(dbState)\n    const defaultDB = useRecoilValue<IdbState[]>(dbDefaultState)\n\n    // 지도가 표시될 HTML element\n    const mapContainer = useRef(null)\n\n    const [markerImage, setMarkerImage] = useState<any>(null)\n\n    // 현재 클릭한 bookstroreId를 저장할 state\n    const [currentOverlayStoreId, setCurrentOverlayStoreId] =\n        useState<any>(null)\n\n    const { makeMap, makeMarkers, map } = useMap(\n        mapContainer,\n        setMarkerImage,\n        markerImage,\n        DB\n    )\n\n    // * 첫 렌더링 시 지도 생성\n    useEffect(() => {\n        makeMap()\n        setDB(defaultDB)\n    }, [makeMap])\n\n    // * DB가 변경되면 마커 생성\n    useEffect(() => {\n        makeMarkers()\n    }, [DB, makeMarkers, markerImage])\n\n    // * 라우터 파라미터로 받은 bookstoreId 값에 따라 지도 이동\n    useEffect(() => {\n        // 지도가 생성되지 않았으면 함수 종료\n        if (!map) return\n\n        // 이전에 클릭한 마커가 있으면 지도에서 제거\n        const prevOverlay = currentOverlayStoreId\n        prevOverlay && prevOverlay.setMap(null)\n\n        // bookstoreId에 해당하는 마커로 지도 이동\n        DB.forEach((store) => {\n            if (store.ESNTL_ID === bookstoreId) {\n                const moveLatLon = new kakao.maps.LatLng(\n                    store.FCLTY_LA,\n                    store.FCLTY_LO\n                )\n                map.setLevel(6) // 지도 확대 레벨 설정\n                map.panTo(moveLatLon) // 지도 중심 좌표 이동\n\n                // 커스텀 오버레이 생성\n                const overlayContent = ReactDOMServer.renderToString(\n                    <Overlay info={store} />\n                )\n                const overlay = new kakao.maps.CustomOverlay({\n                    content: overlayContent,\n                    map: map,\n                    position: moveLatLon,\n                    xAnchor: 0.5,\n                    yAnchor: 0.5,\n                })\n\n                setCurrentOverlayStoreId(overlay)\n            }\n        })\n        //eslint-disable-next-line\n    }, [bookstoreId, map, DB])\n\n    return (\n        <S.Container>\n            <InfoWrapper map={map} />\n            <S.MapContainer ref={mapContainer} />\n        </S.Container>\n    )\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}