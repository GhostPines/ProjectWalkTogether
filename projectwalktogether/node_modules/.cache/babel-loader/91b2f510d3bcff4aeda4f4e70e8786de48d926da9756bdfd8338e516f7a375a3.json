{"ast":null,"code":"var _s = $RefreshSig$();\nimport { useNavigate } from 'react-router-dom';\nimport { useCallback, useState } from 'react';\nconst {\n  kakao\n} = window;\nexport const useMap = (mapContainer, setMarkerImage, markerImage, DB) => {\n  _s();\n  const navigate = useNavigate();\n\n  // map 객체를 저장할 state\n  const [map, setMap] = useState(null);\n  const [markers, setMarkers] = useState([]);\n\n  // * 지도를 생성하는 함수\n  const makeMap = useCallback(() => {\n    console.log('맵 실행');\n    // 지도를 생성할 때 필요한 기본 옵션\n    let options = {\n      center: new kakao.maps.LatLng(37.56839464, 126.9303023),\n      // 지도의 중심 좌표\n      level: 10 // 지도의 확대 수준\n    };\n\n    // 지도를 표시할 div와 지도 옵션으로 지도를 생성함\n    const newMap = new kakao.maps.Map(mapContainer.current, options);\n\n    // 지도 확대 축소를 제어할 수 있는 줌 컨트롤 생성\n    const zoomControl = new kakao.maps.ZoomControl();\n    newMap.addControl(zoomControl, kakao.maps.ControlPosition.RIGHT);\n\n    // 마커 이미지 생성\n    const imageSrc = 'https://t1.daumcdn.net/localimg/localimages/07/mapapidoc/markerStar.png';\n    const imageSize = new kakao.maps.Size(30, 40);\n    setMarkerImage(new kakao.maps.MarkerImage(imageSrc, imageSize));\n    setMap(newMap);\n  }, []);\n  //   mapContainer\n  //   setMarkerImage\n  // * 마커를 생성하는 함수\n  const makeMarkers = useCallback(() => {\n    if (!markerImage) return;\n\n    // 기존 마커 제거\n    // if (markers.length > 0) {\n    //     markers.forEach((marker: any) => marker.setMap(null))\n    // }\n\n    console.log('DB', DB);\n    console.log(Array.isArray(DB));\n    // // 마커 표시하기\n    const newMarkers = [];\n    // //DB 객체를 빈 배열에 넣어주는 코드\n    // let DBArray: any[] = []\n\n    // DBArray.push(DB)\n    // console.log('DBArray', DBArray)\n\n    DB.forEach(Post => {\n      const marker = new kakao.maps.Marker({\n        map: map,\n        // 마커를 표시할 지도\n        title: Post.Title_Posting,\n        // 마커의 타이틀, 마커에 마우스를 올리면 타이틀이 표시됨\n        position: new kakao.maps.LatLng(Post.MeetLatitude_Posting, Post.MeetLongitude_Posting),\n        // 마커를 표시할 위치(위도, 경도)\n        image: markerImage,\n        // 커스텀 마커 이미지 설정\n        id: Post.PostingID_Posting // 마커에 ESNTL_ID를 id로 설정\n      });\n\n      // 마커 클릭시 해당 bookstoreId로 라우터 이동\n      kakao.maps.event.addListener(marker, 'click', () => navigate(`/map/${Post.PostingID_Posting}`));\n\n      // 마커를 배열에 저장\n      newMarkers.push(marker);\n    });\n\n    // 마커 배열을 state에 저장\n    setMarkers(newMarkers);\n\n    // eslint-disable-next-line\n  }, [DB, markerImage]);\n  return {\n    makeMap,\n    makeMarkers,\n    map\n  };\n};\n_s(useMap, \"JEP9kGoLtwsvVoLTBzrmcWFYp0s=\", false, function () {\n  return [useNavigate];\n});","map":{"version":3,"names":["useNavigate","useCallback","useState","kakao","window","useMap","mapContainer","setMarkerImage","markerImage","DB","navigate","map","setMap","markers","setMarkers","makeMap","console","log","options","center","maps","LatLng","level","newMap","Map","current","zoomControl","ZoomControl","addControl","ControlPosition","RIGHT","imageSrc","imageSize","Size","MarkerImage","makeMarkers","Array","isArray","newMarkers","forEach","Post","marker","Marker","title","Title_Posting","position","MeetLatitude_Posting","MeetLongitude_Posting","image","id","PostingID_Posting","event","addListener","push"],"sources":["/Users/minsungsmac/Library/CloudStorage/OneDrive-Personal/ForCode/ProjectWalkTogether/projectwalktogether/src/hooks/useMap.ts"],"sourcesContent":["import { useNavigate } from 'react-router-dom'\nimport { useCallback, useState } from 'react'\n\nconst { kakao } = window\n\nexport const useMap = (\n  mapContainer: any,\n  setMarkerImage: any,\n  markerImage: any,\n  DB: any\n) => {\n  const navigate = useNavigate()\n\n  // map 객체를 저장할 state\n  const [map, setMap] = useState<any>(null)\n  const [markers, setMarkers] = useState<any[]>([])\n\n  // * 지도를 생성하는 함수\n  const makeMap = useCallback(() => {\n    console.log('맵 실행')\n    // 지도를 생성할 때 필요한 기본 옵션\n    let options = {\n      center: new kakao.maps.LatLng(37.56839464, 126.9303023), // 지도의 중심 좌표\n      level: 10, // 지도의 확대 수준\n    }\n\n    // 지도를 표시할 div와 지도 옵션으로 지도를 생성함\n    const newMap = new kakao.maps.Map(mapContainer.current, options)\n\n    // 지도 확대 축소를 제어할 수 있는 줌 컨트롤 생성\n    const zoomControl = new kakao.maps.ZoomControl()\n    newMap.addControl(zoomControl, kakao.maps.ControlPosition.RIGHT)\n\n    // 마커 이미지 생성\n    const imageSrc =\n      'https://t1.daumcdn.net/localimg/localimages/07/mapapidoc/markerStar.png'\n    const imageSize = new kakao.maps.Size(30, 40)\n    setMarkerImage(new kakao.maps.MarkerImage(imageSrc, imageSize))\n\n    setMap(newMap)\n  }, [])\n  //   mapContainer\n  //   setMarkerImage\n  // * 마커를 생성하는 함수\n  const makeMarkers = useCallback(() => {\n    if (!markerImage) return\n\n    // 기존 마커 제거\n    // if (markers.length > 0) {\n    //     markers.forEach((marker: any) => marker.setMap(null))\n    // }\n\n    console.log('DB', DB)\n    console.log(Array.isArray(DB))\n    // // 마커 표시하기\n    const newMarkers: any[] = []\n    // //DB 객체를 빈 배열에 넣어주는 코드\n    // let DBArray: any[] = []\n\n    // DBArray.push(DB)\n    // console.log('DBArray', DBArray)\n\n    DB.forEach((Post: IdbState) => {\n      const marker = new kakao.maps.Marker({\n        map: map, // 마커를 표시할 지도\n        title: Post.Title_Posting, // 마커의 타이틀, 마커에 마우스를 올리면 타이틀이 표시됨\n        position: new kakao.maps.LatLng(\n          Post.MeetLatitude_Posting,\n          Post.MeetLongitude_Posting\n        ), // 마커를 표시할 위치(위도, 경도)\n        image: markerImage, // 커스텀 마커 이미지 설정\n        id: Post.PostingID_Posting, // 마커에 ESNTL_ID를 id로 설정\n      })\n\n      // 마커 클릭시 해당 bookstoreId로 라우터 이동\n      kakao.maps.event.addListener(marker, 'click', () =>\n        navigate(`/map/${Post.PostingID_Posting}`)\n      )\n\n      // 마커를 배열에 저장\n      newMarkers.push(marker)\n    })\n\n    // 마커 배열을 state에 저장\n    setMarkers(newMarkers)\n\n    // eslint-disable-next-line\n  }, [DB, markerImage])\n\n  return { makeMap, makeMarkers, map }\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}