{"ast":null,"code":"var _s = $RefreshSig$();\nimport { useNavigate } from 'react-router-dom';\nimport { useCallback, useState } from 'react';\nconst {\n  kakao\n} = window;\nexport const useMap = (mapContainer, setMarkerImage, markerImage, DB) => {\n  _s();\n  const navigate = useNavigate();\n\n  // map 객체를 저장할 state\n  const [map, setMap] = useState(null);\n  const [markers, setMarkers] = useState([]);\n\n  // * 지도를 생성하는 함수\n  const makeMap = useCallback(() => {\n    // 지도를 생성할 때 필요한 기본 옵션\n    let options = {\n      center: new kakao.maps.LatLng(37.56839464, 126.9303023),\n      // 지도의 중심 좌표\n      level: 10 // 지도의 확대 수준\n    };\n\n    // 지도를 표시할 div와 지도 옵션으로 지도를 생성함\n    const newMap = new kakao.maps.Map(mapContainer.current, options);\n\n    // 지도 확대 축소를 제어할 수 있는 줌 컨트롤 생성\n    const zoomControl = new kakao.maps.ZoomControl();\n    newMap.addControl(zoomControl, kakao.maps.ControlPosition.RIGHT);\n\n    // 마커 이미지 생성\n    const imageSrc = 'https://t1.daumcdn.net/localimg/localimages/07/mapapidoc/markerStar.png';\n    const imageSize = new kakao.maps.Size(30, 30);\n    setMarkerImage(new kakao.maps.MarkerImage(imageSrc, imageSize));\n    setMap(newMap);\n  }, [mapContainer, setMarkerImage]);\n\n  // * 마커를 생성하는 함수\n  const makeMarkers = useCallback(() => {\n    if (!markerImage) return;\n\n    // 기존 마커 제거\n    if (markers.length > 0) {\n      markers.forEach(marker => marker.setMap(null));\n    }\n    console.log('DB', DB);\n    // 마커 표시하기\n    const newMarkers = [];\n    DB.forEach(Post => {\n      const marker = new kakao.maps.Marker({\n        map: map,\n        // 마커를 표시할 지도\n        title: Post.Title_Posting,\n        // 마커의 타이틀, 마커에 마우스를 올리면 타이틀이 표시됨\n        position: new kakao.maps.LatLng(Post.MeetLatitude_Posting, Post.MeetLongitude_Posting),\n        // 마커를 표시할 위치(위도, 경도)\n        image: markerImage,\n        // 커스텀 마커 이미지 설정\n        id: Post.PostingID_Posting // 마커에 ESNTL_ID를 id로 설정\n      });\n\n      // 마커 클릭시 해당 bookstoreId로 라우터 이동\n      kakao.maps.event.addListener(marker, 'click', () => navigate(`/map/${s.PostingID_Posting}`));\n\n      // 마커를 배열에 저장\n      newMarkers.push(marker);\n    });\n\n    // 마커 배열을 state에 저장\n    setMarkers(newMarkers);\n\n    // eslint-disable-next-line\n  }, [DB, map, markerImage]);\n  return {\n    makeMap,\n    makeMarkers,\n    map\n  };\n};\n_s(useMap, \"JEP9kGoLtwsvVoLTBzrmcWFYp0s=\", false, function () {\n  return [useNavigate];\n});","map":{"version":3,"names":["useNavigate","useCallback","useState","kakao","window","useMap","mapContainer","setMarkerImage","markerImage","DB","navigate","map","setMap","markers","setMarkers","makeMap","options","center","maps","LatLng","level","newMap","Map","current","zoomControl","ZoomControl","addControl","ControlPosition","RIGHT","imageSrc","imageSize","Size","MarkerImage","makeMarkers","length","forEach","marker","console","log","newMarkers","Post","Marker","title","Title_Posting","position","MeetLatitude_Posting","MeetLongitude_Posting","image","id","PostingID_Posting","event","addListener","s","push"],"sources":["/Users/minsungsmac/Library/CloudStorage/OneDrive-Personal/ForCode/ProjectWalkTogether/projectwalktogether/src/hooks/useMap.ts"],"sourcesContent":["import { useNavigate } from 'react-router-dom'\nimport { useCallback, useState } from 'react'\n\nconst { kakao } = window\n\nexport const useMap = (\n    mapContainer: any,\n    setMarkerImage: any,\n    markerImage: any,\n    DB: any\n) => {\n    const navigate = useNavigate()\n\n    // map 객체를 저장할 state\n    const [map, setMap] = useState<any>(null)\n    const [markers, setMarkers] = useState<any[]>([])\n\n    // * 지도를 생성하는 함수\n    const makeMap = useCallback(() => {\n        // 지도를 생성할 때 필요한 기본 옵션\n        let options = {\n            center: new kakao.maps.LatLng(37.56839464, 126.9303023), // 지도의 중심 좌표\n            level: 10, // 지도의 확대 수준\n        }\n\n        // 지도를 표시할 div와 지도 옵션으로 지도를 생성함\n        const newMap = new kakao.maps.Map(mapContainer.current, options)\n\n        // 지도 확대 축소를 제어할 수 있는 줌 컨트롤 생성\n        const zoomControl = new kakao.maps.ZoomControl()\n        newMap.addControl(zoomControl, kakao.maps.ControlPosition.RIGHT)\n\n        // 마커 이미지 생성\n        const imageSrc =\n            'https://t1.daumcdn.net/localimg/localimages/07/mapapidoc/markerStar.png'\n        const imageSize = new kakao.maps.Size(30, 30)\n        setMarkerImage(new kakao.maps.MarkerImage(imageSrc, imageSize))\n\n        setMap(newMap)\n    }, [mapContainer, setMarkerImage])\n\n    // * 마커를 생성하는 함수\n    const makeMarkers = useCallback(() => {\n        if (!markerImage) return\n\n        // 기존 마커 제거\n        if (markers.length > 0) {\n            markers.forEach((marker: any) => marker.setMap(null))\n        }\n\n        console.log('DB', DB)\n        // 마커 표시하기\n        const newMarkers: any[] = []\n        DB.forEach((Post: IdbState) => {\n            const marker = new kakao.maps.Marker({\n                map: map, // 마커를 표시할 지도\n                title: Post.Title_Posting, // 마커의 타이틀, 마커에 마우스를 올리면 타이틀이 표시됨\n                position: new kakao.maps.LatLng(\n                    Post.MeetLatitude_Posting,\n                    Post.MeetLongitude_Posting\n                ), // 마커를 표시할 위치(위도, 경도)\n                image: markerImage, // 커스텀 마커 이미지 설정\n                id: Post.PostingID_Posting, // 마커에 ESNTL_ID를 id로 설정\n            })\n\n            // 마커 클릭시 해당 bookstoreId로 라우터 이동\n            kakao.maps.event.addListener(marker, 'click', () =>\n                navigate(`/map/${s.PostingID_Posting}`)\n            )\n\n            // 마커를 배열에 저장\n            newMarkers.push(marker)\n        })\n\n        // 마커 배열을 state에 저장\n        setMarkers(newMarkers)\n\n        // eslint-disable-next-line\n    }, [DB, map, markerImage])\n\n    return { makeMap, makeMarkers, map }\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}